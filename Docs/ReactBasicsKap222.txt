React Native: A Basic Introduction
Overview
React Native is an open-source framework developed by Facebook that allows developers to build mobile applications using JavaScript and React. Instead of targeting the browser like React, React Native targets mobile platforms. Applications built with React Native are truly native and not just "web views".

Key Features
Cross-Platform: Write once, run on both iOS and Android.
Native Components: Use native components controlled by JavaScript.
Performance: Achieve near-native performance.
Hot Reloading: See changes instantly without rebuilding the app.
Vast Community: Benefit from a vast ecosystem of libraries and tools.
Basic Concepts
1. Components
Just like React, React Native is all about components. A component is a self-contained module that renders some output. You can also pass data from one component to another as parameters.

Example:


import React from 'react';
import { Text } from 'react-native';

const Greeting = (props) => {
  return <Text>Hello, {props.name}!</Text>;
}
2. Props
Props (short for properties) are a way of passing data from parent to child components.

Example using the previous Greeting component:


<Greeting name="React Native" />
3. State
State allows React components to change their output over time in response to user actions, network responses, etc.


import React, { useState } from 'react';
import { Text, Button } from 'react-native';

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <>
      <Text>{count}</Text>
      <Button title="Increase" onPress={() => setCount(count + 1)} />
    </>
  );
}
4. Styles
React Native does not use CSS files. Instead, styles are written as JavaScript objects:


import { StyleSheet, Text } from 'react-native';

const styles = StyleSheet.create({
  redText: {
    color: 'red'
  }
});

const RedComponent = () => <Text style={styles.redText}>This is red.</Text>;
5. Flexbox
React Native uses Flexbox for layout, which lets you layout multiple children in a row or column manner:

import { View, StyleSheet } from 'react-native';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column'
  }
});
6. Native Modules
For functionalities that arenâ€™t available in the core, React Native provides a way to write native code and have it interact with JavaScript.

Setting Up
Installation:

Install Node.js and npm (Node package manager).
Install the React Native CLI: npm install -g react-native-cli.
Install a mobile emulator (iOS Simulator for Apple and Android Studio for Android).
Creating a New Project:


react-native init AwesomeApp
Running Your App:

For iOS: react-native run-ios
For Android: react-native run-android
Conclusion
React Native provides a fantastic way to build mobile apps with a shared codebase between iOS and Android while achieving native performance. This introduction has touched on the basic concepts and setup, but there's so much more to explore. As with any tool, the best way to learn is to start building!